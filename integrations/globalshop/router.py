import decimal
from collections import namedtuple
from typing import Union
from globalshop.client import GlobalShopClient
from baseintegration.utils.data import sqlize_str, sqlize_value, sqlize_bool
from integrations.baseintegration.datamigration import logger

RouterRecord = namedtuple('RouterRecord', ('external_id', 'router_number',
                                           'revision',
                                           'router_description',
                                           'product_line', 'uom',
                                           'commission_percent',
                                           'scrap_percent', 'customer_id',
                                           'qty_1', 'qty_2', 'qty_3',
                                           'qty_4', 'qty_5', 'qty_6', 'qty_7',
                                           'qty_8', 'qty_9', 'qty_10',
                                           'extra_description_1',
                                           'extra_description_2',
                                           'extra_description_3', 'part_id',
                                           'drawing_number',
                                           'user_field_1', 'user_field_2',
                                           'line_type',
                                           'line_number', 'material',
                                           'material_rev', 'op_code',
                                           'setup', 'line_qty',
                                           'rate', 'minimum',
                                           'lead_hours', 'overlap',
                                           'frequency', 'sequence_group',
                                           'line_description', 'sort_code',
                                           'workcenter',
                                           'crew_size', 'workcenter_factor',
                                           'yield_amt', 'vendor_id',
                                           'signoff_type',
                                           'signoff_by', 'line_cmts',
                                           'runtime', 'outside_code', 'line_unit_of_measure',
                                           'project_group', 'omit_from_wo', 'router_complete'))


class Router:
    """
    The router for a part is a set of steps to produce the part. The router is
    unique to the part+rev. There are many types of routing steps:
    'M' - Material. Similar to a BOM, and sometimes interchangeable in
    usage. A Part number is passed in or created.
    'L' - Labor. An operation perfomred. This can be tied to an op code,
    workcenter, or workcenter group
    'O' - Outside. This is an action performed by an outside vendor. A
    vendor ID is passed in.
    'C' - Comment. A string only comment. They can be a pre-defined comment
    that is loaded by a the unique comment id.
    'T' - Task. Infrequently used, specific to the Task module in Globalshop.
    """

    """
    Schema of router staging table:
    CREATE TABLE "GCG_5807_ROUT_STAGE" (
    "RECORD_ID" IDENTITY DEFAULT '0' CONSTRAINT "UK_RECORD_ID" UNIQUE USING 0,
    "RECORD_TIMESTAMP" DATETIME DEFAULT NOW(),
    "PROCESSED" BIT DEFAULT '0' NOT NULL,
    "FAILED" BIT DEFAULT '0' NOT NULL,
    "PROCESSED_TIMESTAMP" DATETIME,
    "FEEDBACK" LONGVARCHAR,
    "EXTERNAL_ID" CHAR(50) NOT NULL,
    "ROUTER_NUMBER" CHAR(20) NOT NULL,
    "REVISION" CHAR(3),
    "ROUTER_DESCRIPTION" CHAR(30),
    "PRODUCT_LINE" CHAR(2) NOT NULL,
    "UNIT_OF_MEASURE" CHAR(2) NOT NULL,
    "ORIGINAL_DATE" DATE DEFAULT CURDATE() NOT NULL, -- Never setting this
    "COMMISSION_PERCENT" DOUBLE,
    "SCRAP_PERCENT" DOUBLE,
    "CUSTOMER_ID" CHAR(6),
    "QUANTITY_1" DOUBLE,
    "QUANTITY_2" DOUBLE,
    "QUANTITY_3" DOUBLE,
    "QUANTITY_4" DOUBLE,
    "QUANTITY_5" DOUBLE,
    "QUANTITY_6" DOUBLE,
    "QUANTITY_7" DOUBLE,
    "QUANTITY_8" DOUBLE,
    "QUANTITY_9" DOUBLE,
    "QUANTITY_10" DOUBLE,
    "EXTRA_DESCRIPTION_1" CHAR(30),
    "EXTRA_DESCRIPTION_2" CHAR(30),
    "EXTRA_DESCRIPTION_3" CHAR(30),
    "PART_ID" CHAR(20),
    "DRAWING_NUMBER" CHAR(20),
    "USER_FIELD_1" CHAR(20),
    "USER_FIELD_2" CHAR(20),
    "LINE_TYPE" CHAR(1) NOT NULL,
    "LINE_NUMBER" INTEGER DEFAULT '0',
    "MATERIAL" CHAR(20),
    "MATERIAL_REVISION" CHAR(3),
    "OPERATION" CHAR(6),
    "SETUP" DOUBLE,
    "LINE_QUANTITY" DOUBLE,
    "RATE" DOUBLE,
    "MINIMUM" DOUBLE,
    "LEAD_HOURS" DOUBLE,
    "OVERLAP" DOUBLE,
    "FREQUENCY" DOUBLE,
    "SEQUENCE_GROUP" CHAR(3),
    "LINE_DESCRIPTION" CHAR(30),
    "SORT_CODE" CHAR(20),
    "WORKCENTER" CHAR(4),
    "CREW_SIZE" DOUBLE,
    "WORKCENTER_FACTOR" INTEGER,
    "YIELD" DOUBLE,
    "VENDOR_ID" CHAR(6),
    "SIGNOFF_TYPE" CHAR(1),
    "SIGNOFF_BY" CHAR(8),
    "LINE_COMMENTS" LONGVARCHAR,
    "LINE_UNIT_OF_MEASURE" CHAR(2) NOT NULL,
    "OMIT_FROM_WO" BIT DEFAULT '0' NOT NULL
    "ROUTER_COMPLETE" BIT DEFAULT '0' NOT NULL);
    """

    @classmethod
    def insert(cls, external_id: str, router_number: str, product_line: str,
               uom: str,
               line_type: str,
               revision: str = None,
               router_description: str = None,
               commission_percent: decimal.Decimal = None,
               scrap_percent: decimal.Decimal = None, customer_id: str = None,
               qty_1: decimal.Decimal = None, qty_2: decimal.Decimal = None,
               qty_3: decimal.Decimal = None, qty_4: decimal.Decimal = None,
               qty_5: decimal.Decimal = None, qty_6: decimal.Decimal = None,
               qty_7: decimal.Decimal = None, qty_8: decimal.Decimal = None,
               qty_9: decimal.Decimal = None, qty_10: decimal.Decimal = None,
               extra_description_1: str = None,
               extra_description_2: str = None,
               extra_description_3: str = None, part_id: str = None,
               drawing_number: str = None,
               user_field_1: str = None, user_field_2: str = None,
               material: str = None, material_rev: str = None,
               op_code: str = None,
               setup: decimal.Decimal = None,
               line_qty: Union[decimal.Decimal, int] = None,
               rate: decimal.Decimal = None, minimum: decimal.Decimal = None,
               lead_hours: decimal.Decimal = None,
               overlap: decimal.Decimal = None,
               frequency: decimal.Decimal = None, sequence_group: str = None,
               line_description: str = None, sort_code: str = None,
               workcenter: str = None,
               crew_size: decimal.Decimal = None,
               workcenter_factor: int = None,
               yield_amt: decimal.Decimal = 1, vendor_id: str = None,
               signoff_type: str = None,
               signoff_by: str = None, line_cmts: str = None,
               runtime: decimal.Decimal = None, outside_code: str = None,
               line_number: int = 0, line_unit_of_measure: str = 'EA',
               project_group: str = None, omit_from_wo: bool = False, router_complete: bool = False, batch_process=True
               ):
        """
        Insert a line in the Routing steps of a given part
        :param batch_process: Defaults to True if you want to cache the sql
        INSERT command for this routing line, and then process all lines of
        a given router at once. It is the responsibility of the caller to
        execute the cache at the right time.
        """
        sql_cmd = f"""
             INSERT INTO GCG_5807_ROUT_STAGE (
             EXTERNAL_ID,
             ROUTER_NUMBER,
             REVISION,
             ROUTER_DESCRIPTION,
             PRODUCT_LINE,
             UNIT_OF_MEASURE,
             COMMISSION_PERCENT,
             SCRAP_PERCENT,
             CUSTOMER_ID,
             QUANTITY_1,
             QUANTITY_2,
             QUANTITY_3,
             QUANTITY_4,
             QUANTITY_5,
             QUANTITY_6,
             QUANTITY_7,
             QUANTITY_8,
             QUANTITY_9,
             QUANTITY_10,
             EXTRA_DESCRIPTION_1,
             EXTRA_DESCRIPTION_2,
             EXTRA_DESCRIPTION_3,
             PART_ID,
             DRAWING_NUMBER,
             USER_FIELD_1,
             USER_FIELD_2,
             LINE_TYPE,
             LINE_NUMBER,
             MATERIAL,
             MATERIAL_REVISION,
             OPERATION,
             SETUP,
             LINE_QUANTITY,
             RATE,
             MINIMUM,
             LEAD_HOURS,
             OVERLAP,
             FREQUENCY,
             SEQUENCE_GROUP,
             LINE_DESCRIPTION,
             SORT_CODE,
             WORKCENTER,
             CREW_SIZE,
             WORKCENTER_FACTOR,
             YIELD,
             VENDOR_ID,
             SIGNOFF_TYPE,
             SIGNOFF_BY,
             LINE_COMMENTS,
             RUNTIME,
             OUTSIDE_CODE,
             LINE_UNIT_OF_MEASURE,
             PROJECT_GROUP,
             OMIT_FROM_WO,
             ROUTER_COMPLETE)
             VALUES (
             {sqlize_str(external_id)},
             {sqlize_str(router_number)},
             {sqlize_str(revision)},
             {sqlize_str(router_description)},
             {sqlize_str(product_line)},
             {sqlize_str(uom)},
             {sqlize_value(commission_percent)},
             {sqlize_value(scrap_percent)},
             {sqlize_str(customer_id)},
             {sqlize_value(qty_1)},
             {sqlize_value(qty_2)},
             {sqlize_value(qty_3)},
             {sqlize_value(qty_4)},
             {sqlize_value(qty_5)},
             {sqlize_value(qty_6)},
             {sqlize_value(qty_7)},
             {sqlize_value(qty_8)},
             {sqlize_value(qty_9)},
             {sqlize_value(qty_10)},
             {sqlize_str(extra_description_1)},
             {sqlize_str(extra_description_2)},
             {sqlize_str(extra_description_3)},
             {sqlize_str(part_id)},
             {sqlize_str(drawing_number)},
             {sqlize_str(user_field_1)},
             {sqlize_str(user_field_2)},
             {sqlize_str(line_type)},
             {sqlize_value(line_number)},
             {sqlize_str(material)},
             {sqlize_str(material_rev)},
             {sqlize_str(op_code)},
             {sqlize_value(setup)},
             {sqlize_value(line_qty)},
             {sqlize_value(rate)},
             {sqlize_value(minimum)},
             {sqlize_value(lead_hours)},
             {sqlize_value(overlap)},
             {sqlize_value(frequency)},
             {sqlize_str(sequence_group)},
             {sqlize_str(line_description)},
             {sqlize_str(sort_code)},
             {sqlize_str(workcenter)},
             {sqlize_value(crew_size)},
             {sqlize_value(workcenter_factor)},
             {sqlize_value(yield_amt)},
             {sqlize_str(vendor_id)},
             {sqlize_str(signoff_type)},
             {sqlize_str(signoff_by)},
             {sqlize_str(line_cmts,remove_newlines=False, replace_newline_char='***N***')},
             {sqlize_value(runtime)},
             {sqlize_str(outside_code)},
             {sqlize_str(line_unit_of_measure)},
             {sqlize_str(project_group)},
             {sqlize_bool(omit_from_wo)},
             {sqlize_bool(router_complete)});"""

        client: GlobalShopClient = GlobalShopClient.get_instance()
        logger.debug(f'INSERT ROUTER: "{sql_cmd}"')

        if batch_process:
            client.cache(sql_cmd=sql_cmd)
        else:
            cursor = client.cursor()
            logger.debug(f'INSERT ROUTER: "{sql_cmd}"')
            cursor.execute(sql_cmd)
            # row = cursor.fetchone()
            cursor.commit()
            cursor.close()
        return RouterRecord(external_id=external_id,
                            router_number=router_number, revision=revision,
                            router_description=router_description,
                            product_line=product_line, uom=uom,
                            commission_percent=commission_percent,
                            scrap_percent=scrap_percent,
                            customer_id=customer_id, qty_1=qty_1, qty_2=qty_2,
                            qty_3=qty_3, qty_4=qty_4, qty_5=qty_5, qty_6=qty_6,
                            qty_7=qty_7, qty_8=qty_8, qty_9=qty_9,
                            qty_10=qty_10,
                            extra_description_1=extra_description_1,
                            extra_description_2=extra_description_2,
                            extra_description_3=extra_description_3,
                            part_id=part_id, drawing_number=drawing_number,
                            user_field_1=user_field_1,
                            user_field_2=user_field_2, line_type=line_type,
                            line_number=line_number, material=material,
                            material_rev=material_rev, op_code=op_code,
                            setup=setup, line_qty=line_qty, rate=rate,
                            minimum=minimum, lead_hours=lead_hours,
                            overlap=overlap, frequency=frequency,
                            sequence_group=sequence_group,
                            line_description=line_description,
                            sort_code=sort_code, workcenter=workcenter,
                            crew_size=crew_size,
                            workcenter_factor=workcenter_factor,
                            yield_amt=yield_amt, vendor_id=vendor_id,
                            signoff_type=signoff_type, signoff_by=signoff_by,
                            line_cmts=line_cmts, runtime=runtime,
                            outside_code=outside_code,
                            line_unit_of_measure=line_unit_of_measure,
                            project_group=project_group,
                            omit_from_wo=omit_from_wo,
                            router_complete=router_complete)
